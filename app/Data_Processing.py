
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_auc_score
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

dataset_filename = 'top_1000_pe_imports.csv'
knn_model_filename = 'knnjoblib_file.sav'
rf_model_filename = 'rfjoblib_file.sav'
save_model = True

def get_data():
  data = pd.read_csv(dataset_filename)
  data_sorted = data.sort_values('malware')
  data_sorted = data_sorted.head(5000)
  x = data_sorted.drop(["malware","hash"], axis = 1)
  y = data_sorted['malware']
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)
  return (x, y)

def get_train_test_split(x, y):
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)
  return (x_train, x_test, y_train, y_test)

def plot_confusion_matrix(y_test, y_pred):
  cf_matrix1= confusion_matrix(y_test, y_pred)
  group_names = ["TrueNeg","FalsePos","FalseNeg","TruePos"]
  group_counts = ["{0:0.0f}".format(value) for value in
                  cf_matrix1.flatten()]
  group_percentages = ["{0:.2%}".format(value) for value in
                      cf_matrix1.flatten()/np.sum(cf_matrix1)]
  labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in
            zip(group_names,group_counts,group_percentages)]
  labels = np.asarray(labels).reshape(2,2)
  sns.heatmap(cf_matrix1, annot=labels, fmt="", cmap='Blues')

def get_predictions_and_probabilities_KNN_and_RF(x):
  # knn_model = joblib.load(knn_model_filename)
  # rf_model = joblib.load(rf_model_filename)
  y_pred_knn_proba = np.array(knn.predict_proba(x))
  y_pred_rf_proba = np.array(clf2.predict_proba(x))
  y_pred_knn_proba = y_pred_knn_proba.T
  y_pred_rf_proba = y_pred_rf_proba.T
  data_dict = dict()
  data_dict["KNN Pred Prob 0"] = y_pred_knn_proba[0]
  data_dict["KNN Pred Prob 1"] = y_pred_knn_proba[1]
  data_dict["RF Pred Prob 0"] = y_pred_rf_proba[0]
  data_dict["RF Pred Prob 1"] = y_pred_rf_proba[1]
  df = pd.DataFrame(data_dict)
  print(df.head())
  return df

x, y = get_data()
x_train, x_test, y_train, y_test = get_train_test_split(x, y)

knn = KNeighborsClassifier(n_neighbors=12)
clf = knn.fit(x_train, y_train)
y_pred = clf.predict(x_test)
acc_knb_model=roc_auc_score(y_test, y_pred)*100

if save_model:
  joblib.dump(knn, knn_model_filename)
  print("KNN Model Saved to ", knn_model_filename)

print("KNN Accuracy: ", acc_knb_model)
plot_confusion_matrix(y_test, y_pred)
plt.show()

clf2 = RandomForestClassifier(max_depth=45, random_state=4).fit(x_train, y_train)
y_pred2 = clf2.predict(x_test)
acc_rmf_model = roc_auc_score(y_test, y_pred2)*100

if save_model:
  joblib.dump(clf2, rf_model_filename)
  print("RF Model Saved to ", rf_model_filename)

print("RF Accuracy: ", acc_rmf_model)
plot_confusion_matrix(y_test, y_pred2)
plt.show()


def get_data():
  data = pd.read_csv(dataset_filename)
  data_sorted = data.sort_values('malware')
  data_sorted = data_sorted.head(5000)
  x_2 = data_sorted.drop(["malware","hash"], axis = 1)
  y = data_sorted['malware']
  y = pd.DataFrame(data=y,columns=['malware'])
  y = y.reset_index(drop=True)

  x_2 = StandardScaler().fit_transform(x_2)
  col = []
  a = 100
  col = col_pca(a)
  pca = PCA(n_components=a)
  principalComponents = pca.fit_transform(x_2)
  x = pd.DataFrame(data = principalComponents, columns = col)
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)
  return (x, y)

def col_pca(a):
  columns = []
  for i in range (0,a):
    name = "PC{}".format(i+1)
    columns.append(name)
  return columns

def get_train_test_split(x, y):
  x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)
  return (x_train, x_test, y_train, y_test)

def plot_confusion_matrix(y_test, y_pred):
  cf_matrix1= confusion_matrix(y_test, y_pred)
  group_names = ["TrueNeg","FalsePos","FalseNeg","TruePos"]
  group_counts = ["{0:0.0f}".format(value) for value in
                  cf_matrix1.flatten()]
  group_percentages = ["{0:.2%}".format(value) for value in
                      cf_matrix1.flatten()/np.sum(cf_matrix1)]
  labels = [f"{v1}\n{v2}\n{v3}" for v1, v2, v3 in
            zip(group_names,group_counts,group_percentages)]
  labels = np.asarray(labels).reshape(2,2)
  sns.heatmap(cf_matrix1, annot=labels, fmt="", cmap='Blues')

def get_predictions_and_probabilities_KNN_and_RF(x):
  knn_model = joblib.load(knn_model_filename)
  rf_model = joblib.load(rf_model_filename)
  y_pred_knn_proba = np.array(knn_model.predict_proba(x))
  y_pred_rf_proba = np.array(rf_model.predict_proba(x))
  y_pred_knn_proba = y_pred_knn_proba.T
  y_pred_rf_proba = y_pred_rf_proba.T
  data_dict = dict()
  data_dict["KNN Pred Prob 0"] = y_pred_knn_proba[0]
  data_dict["KNN Pred Prob 1"] = y_pred_knn_proba[1]
  data_dict["RF Pred Prob 0"] = y_pred_rf_proba[0]
  data_dict["RF Pred Prob 1"] = y_pred_rf_proba[1]
  df = pd.DataFrame(data_dict)
  print(df.head())
  return df
x, y = get_data()
x_train, x_test, y_train, y_test = get_train_test_split(x, y)

print("",print(x.head()))

from sklearn.ensemble import RandomForestClassifier
from matplotlib import pyplot
clf2 = RandomForestClassifier(max_depth=45, random_state=4).fit(x_train, y_train)
importance = clf2.feature_importances_
for i,v in enumerate(importance):
	print('Feature: %0d, Score: %.5f' % (i,v))
pyplot.bar([x for x in range(len(importance))], importance)
pyplot.show()

importance = importance.T
arr=[]
arr = [i for i in range(100)] 
arr = np.array(arr)
arr = arr.T
data_dict = dict()
data_dict["Feature"] = arr
data_dict["Score"] = importance
df = pd.DataFrame(data_dict)

df

df.sort_values(by=['Score'],ascending=False,inplace=True)
df = df.reset_index(drop=True)
df

s = df['Feature']
new_x = pd.DataFrame(columns = x.columns)
new_y = pd.DataFrame(columns = y.columns)
# print(new_x)
for j in range(4,5000,5):
  new_x = new_x.append(x.iloc[j], ignore_index = True)
  new_y = new_y.append(y.iloc[j],ignore_index = True)
for i in range(10):
  a = s[i]

  for j in range(len(new_x)):

    new_x.iloc[j,a] = 0 - new_x.iloc[j,a]

print(new_x.head())
print(new_y.head())

y_pred2 = clf2.predict(new_x)
new_y = new_y.astype(int)

acc_rmf_model = roc_auc_score(new_y, y_pred2)*100
print("RF Accuracy: ", acc_rmf_model)
plot_confusion_matrix(new_y, y_pred2)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)

new_x_wadv = pd.DataFrame(data = x, columns = x.columns)
new_y_wadv = pd.DataFrame(data = y, columns = y.columns)
for i in range(1000):
  new_x_wadv = new_x_wadv.append(new_x.iloc[i], ignore_index = True)
  new_y_wadv = new_y_wadv.append(new_y.iloc[i],ignore_index = True)

print(new_x_wadv.shape, new_y_wadv.shape)

new_x_wadv_train, new_x_wadv_test, new_y_wadv_train, new_y_wadv_test = train_test_split(new_x_wadv, new_y_wadv, test_size=0.3, random_state=1)
clf_new= RandomForestClassifier(max_depth=45, random_state=4).fit(new_x_wadv_train, new_y_wadv_train)
y_pred2 = clf2.predict(new_x_wadv_test)
acc_rmf_model = roc_auc_score(new_y_wadv_test, y_pred2)*100
save_model = True

if save_model:
  joblib.dump(clf2, rf_model_filename)
  print("RF Model Saved to ", rf_model_filename)

print("RF Accuracy: ", acc_rmf_model)
plot_confusion_matrix(new_y_wadv_test, y_pred2)
plt.show()
knn = KNeighborsClassifier(n_neighbors=12)
clf = knn.fit(x_train, y_train)
y_pred = clf.predict(new_x)
acc_knb_model=roc_auc_score(new_y, y_pred)*100

print("KNN Accuracy: ", acc_knb_model)
plot_confusion_matrix(new_y, y_pred)
plt.show()
knn = KNeighborsClassifier(n_neighbors=12)
clf = knn.fit(new_x_wadv_train, new_y_wadv_train)
y_pred = clf.predict(new_x_wadv_test)
acc_knb_model=roc_auc_score(new_y_wadv_test, y_pred)*100
save_model = True

if save_model:
  joblib.dump(knn, knn_model_filename)
  print("KNN Model Saved to ", knn_model_filename)

print("KNN Accuracy: ", acc_knb_model)
plot_confusion_matrix(new_y_wadv_test, y_pred)
plt.show()
knn = KNeighborsClassifier(n_neighbors=12)
clf = knn.fit(x_train, y_train)
y_pred = clf.predict(x_test)
acc_knb_model=roc_auc_score(y_test, y_pred)*100
save_model = True

if save_model:
  joblib.dump(knn, knn_model_filename)
  print("KNN Model Saved to ", knn_model_filename)

print("KNN Accuracy: ", acc_knb_model)
plot_confusion_matrix(y_test, y_pred)
plt.show()

clf2 = RandomForestClassifier(max_depth=45, random_state=4).fit(x_train, y_train)
y_pred2 = clf2.predict(x_test)
acc_rmf_model = roc_auc_score(y_test, y_pred2)*100
save_model = True

if save_model:
  joblib.dump(clf2, rf_model_filename)
  print("RF Model Saved to ", rf_model_filename)

print("RF Accuracy: ", acc_rmf_model)
plot_confusion_matrix(y_test, y_pred2)
plt.show()